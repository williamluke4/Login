#!/usr/bin/env node
var app = require('../app');
var pkg = require('../package.json');
var socket  = require('socket.io');
app.set('port', process.env.PORT || 3700);
var io = socket.listen(app);
var server = app.listen(app.get('port'), function() {
  console.log(pkg.name, 'Listening On Port ', server.address().port);
});

function sendMessage(message, socket, elementID, webState,callback){
    exec.execFile('../remote',
        ['-m', message],
        function (error, stdout, stderr) {
            console.log("The message is: " + message);
            console.log('stdout: ' + stdout);
            console.log('stderr: ' + stderr);
            if( stdout.indexOf("RECIVED:") > -1 && callback == true){
                var state = stdout.split('RECIVED: ')[1].split('.')[0];
                console.log("Sending Message Back To Client");
                socket.emit(
                    "callbackButton",
                    {
                        webstate: webState,
                        message: "received",
                        operation: message,
                        state: state,
                        switchID: elementID

                    });
            }

            else if(stdout.indexOf("NO REPLY") > -1 && callback == true) {
                console.log('NO REPLY' + elementID + ' ' + webState);

                socket.emit(
                    "failed",
                    {
                        webstate: webState,
                        switchID: elementID
                    });

            }

            if (error !== null && callback == true) {
                console.log('exec error: ' + error );

                socket.emit(
                    "callbackError",
                    {
                        webstate: webState,
                        error: error,
                        switchID: elementID

                    });

            }


        });
}


var io = require('socket.io').listen(3700);
io.sockets.on('connection', function (socket) {
  socket.on('send', function (data) {

    sendMessage(data.message, socket, data.switchID, data.webstate);

  });
});